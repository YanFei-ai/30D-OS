     1 00000000                                 ; Thanos-os boot asm
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4  = 00280000                              BOTPAK	EQU		0x00280000		; bootpack要copy道德目的位置
     5  = 00100000                              DSKCAC	EQU		0x00100000		; 启动区的目的位置
     6  = 00008000                              DSKCAC0	EQU		0x00008000		; 磁盘上的内容装载到了内存的0x8000地址，扇区一作为启动扇区 512KB
     7 00000000                                 
     8 00000000                                 ;BOOT INFO
     9  = 00000FF0                              CYLS    EQU     0x0ff0      ;承接ipl10.nas中的值，设定启动区
    10  = 00000FF1                              LEDS	EQU		0x0ff1
    11  = 00000FF2                              VMODE	EQU		0x0ff2		;关于颜色数目的信息，颜色的位数放在了0x0ff2
    12  = 00000FF4                              SCRNX	EQU		0x0ff4		;分辨率的X
    13  = 00000FF6                              SCRNY	EQU		0x0ff6		;分辨率的Y
    14  = 00000FF8                              VRAM	EQU		0x0ff8		;图像缓冲区的开始地址
    15 00000000                                 
    16                                              ORG		0xc200  ;执行磁盘影像上位于0x4200地址处的程序
    17 0000C200                                     ;因为磁盘上的内容装载到了内存的0x8000地址，所以
    18 0000C200                                     ;磁盘上0x4200对饮内存的0xc200
    19 0000C200                                 
    20 0000C200 B0 13                               MOV     AL,0x13			;VGA显卡
    21 0000C202 B4 00                               MOV     AH,0x00
    22 0000C204 CD 10                               INT     0x10
    23 0000C206 C6 06 0FF2 08                       MOV     BYTE[VMODE],8        ;记录画面模式
    24 0000C20B C7 06 0FF4 0140                     MOV     WORD[SCRNX],320
    25 0000C211 C7 06 0FF6 00C8                     MOV     WORD[SCRNY],200
    26 0000C217 66 C7 06 0FF8 000A0000              MOV     DWORD[VRAM],0x000a0000   ;这个值是因为INT 10，表示这种画面模式下，VRAM是0xa000-0xffff的64k
    27 0000C220                                                                     ;VRAM video RAM，每个地址都对应着画面上的像素
    28 0000C220                                 
    29 0000C220                                     ;用BIOS取得键盘上各种LED指示灯的状态
    30 0000C220 B4 02                               MOV     AH,0x02
    31 0000C222 CD 16                               INT     0x16                    ;keyboard BIOS
    32 0000C224 A2 0FF1                             MOV     [LEDS],AL
    33 0000C227                                 
    34 0000C227                                 ; PIC关闭一切中断
    35 0000C227                                 ;	根据AT兼容机的规格，如果初始化PIC，
    36 0000C227                                 ;	必须在CLI之前进行，否则有时会挂起
    37 0000C227                                 ;	随后进行PIC的初始化
    38 0000C227                                 
    39 0000C227 B0 FF                           		MOV		AL,0xff
    40 0000C229 E6 21                           		OUT		0x21,AL
    41 0000C22B 90                              		NOP						; 如果连续执行OUT指令，有些电脑无法正常运行，NOP让CPU休息一个时钟长的时间
    42 0000C22C E6 A1                           		OUT		0xa1,AL
    43 0000C22E                                 
    44 0000C22E FA                              		CLI						; 禁止CPU级别的中断
    45 0000C22F                                 ; 等同于
    46 0000C22F                                 ; io_out(PIC0_IMR, 0xff);	//禁止主PIC的全部中断
    47 0000C22F                                 ; io_out(PIC1_IMR, 0xff);	//禁止从PIC的全部中断
    48 0000C22F                                 ; io_cli();					//禁止CPU级别的中断
    49 0000C22F                                 
    50 0000C22F                                 ;为了让CPU能够访问1MB以上的内存空间， 设定A20GATE
    51 0000C22F E8 00B5                         		CALL	waitkbdout		;等同于wait_KBC_sendready,结构与init_keyboard相同，功能就是实现往键盘控制电路发送指令
    52 0000C232 B0 D1                           		MOV		AL,0xd1
    53 0000C234 E6 64                           		OUT		0x64,AL
    54 0000C236 E8 00AE                         		CALL	waitkbdout
    55 0000C239 B0 DF                           		MOV		AL,0xdf			; enable A20
    56 0000C23B E6 60                           		OUT		0x60,AL
    57 0000C23D E8 00A7                         		CALL	waitkbdout
    58 0000C240                                 
    59 0000C240                                 ; 切换保护模式
    60 0000C240                                 
    61 0000C240                                 [INSTRSET "i486p"]				; 想要使用486指令的叙述，INSTRSET指令，为了能使用386后面的LGDT、EAX、CR0等关键字
    62 0000C240                                 
    63 0000C240 0F 01 16 C32A                   		LGDT	[GDTR0]			; 设定临时GDT
    64 0000C245 0F 20 C0                        		MOV		EAX,CR0
    65 0000C248 66 25 7FFFFFFF                  		AND		EAX,0x7fffffff	; 设定CR0的bit31为0，为了禁分页
    66 0000C24E 66 83 C8 01                     		OR		EAX,0x00000001	; 设置CR0的bit0为1，为了切换到保护模式
    67 0000C252 0F 22 C0                        		MOV		CR0,EAX			; set CR0 to start protected-mode and forbid page-mode by register EAX
    68 0000C255 EB 00                           		JMP		pipelineflush	; switch into protected-mode, and then JMP 
    69 0000C257                                 pipelineflush:
    70 0000C257                                 ; value of all seg-registers from 0x0000 to 0x0008(gdt+1), but change CS last 
    71 0000C257 B8 0008                         		MOV		AX,1*8			;  RW-seg 32bit
    72 0000C25A 8E D8                           		MOV		DS,AX
    73 0000C25C 8E C0                           		MOV		ES,AX
    74 0000C25E 8E E0                           		MOV		FS,AX
    75 0000C260 8E E8                           		MOV		GS,AX
    76 0000C262 8E D0                           		MOV		SS,AX
    77 0000C264                                 
    78 0000C264                                 ; transfer bootpack
    79 0000C264                                 ; copy bootpack.hrb to address 0x00280000, 
    80 0000C264                                 	; 从bootpack的地址开始的512KB呢欸容复制到0x00280000
    81 0000C264 66 BE 0000C330                  		MOV		ESI,bootpack	; src
    82 0000C26A 66 BF 00280000                  		MOV		EDI,BOTPAK		; dest
    83 0000C270 66 B9 00020000                  		MOV		ECX,512*1024/4
    84 0000C276 E8 0077                         		CALL	memcpy
    85 0000C279                                 
    86 0000C279                                 ; 磁盘数据最终传送到它本来的位置去
    87 0000C279                                 
    88 0000C279                                 ; 首先是启动区开始
    89 0000C279                                 	;从0x7c00复制512字节到0x00100000
    90 0000C279 66 BE 00007C00                  		MOV		ESI,0x7c00		; src
    91 0000C27F 66 BF 00100000                  		MOV		EDI,DSKCAC		; dest
    92 0000C285 66 B9 00000080                  		MOV		ECX,512/4
    93 0000C28B E8 0062                         		CALL	memcpy
    94 0000C28E                                 
    95 0000C28E                                 ; 所有剩下的
    96 0000C28E                                 	;将始于0x00008200的磁盘内容，复制到ox00100200
    97 0000C28E 66 BE 00008200                  		MOV		ESI,DSKCAC0+512	; src
    98 0000C294 66 BF 00100200                  		MOV		EDI,DSKCAC+512	; dest
    99 0000C29A 66 B9 00000000                  		MOV		ECX,0
   100 0000C2A0 8A 0E 0FF0                      		MOV		CL,BYTE [CYLS]
   101 0000C2A4 66 69 C9 00001200               		IMUL	ECX,512*18*2/4	; 从柱面数变为字节数要 /4
   102 0000C2AB 66 81 E9 00000080               		SUB		ECX,512/4		; 减去IPL
   103 0000C2B2 E8 003B                         		CALL	memcpy
   104 0000C2B5                                 
   105 0000C2B5                                 ; 必须由asmhead.nas完成的工作，至此全部完毕
   106 0000C2B5                                 ; 以后就交友bootpack来完成
   107 0000C2B5                                 
   108 0000C2B5                                 ; bootpack的启动
   109 0000C2B5                                 
   110 0000C2B5 66 BB 00280000                  		MOV		EBX,BOTPAK
   111 0000C2BB 67 66 8B 4B 10                  		MOV		ECX,[EBX+16]	; bootpack.hrb之后的第16号地址，即0x11a8
   112 0000C2C0 66 83 C1 03                     		ADD		ECX,3			; ECX += 3;
   113 0000C2C4 66 C1 E9 02                     		SHR		ECX,2			; ECX /= 4;
   114 0000C2C8 74 10                           		JZ		skip			; 没有要传送的东西时
   115 0000C2CA 67 66 8B 73 14                  		MOV		ESI,[EBX+20]	; 转送源   ; bootpack.hrb之后的第20号地址，即0x10c8
   116 0000C2CF 66 01 DE                        		ADD		ESI,EBX
   117 0000C2D2 67 66 8B 7B 0C                  		MOV		EDI,[EBX+12]	; 转送目的地  ; bootpack.hrb之后的第12号地址，即0x00310000，通过二进制文件bootpack.hrb来确认
   118 0000C2D7 E8 0016                         		CALL	memcpy
   119 0000C2DA                                 skip:
   120 0000C2DA 67 66 8B 63 0C                  		MOV		ESP,[EBX+12]	; 栈初始值
   121 0000C2DF 66 EA 0000001B 0010             		JMP		DWORD 2*8:0x0000001b
   122 0000C2E7                                 
   123 0000C2E7                                 waitkbdout:
   124 0000C2E7 E4 64                           		IN		 AL,0x64
   125 0000C2E9 24 02                           		AND		 AL,0x02	
   126 0000C2EB E4 60                           		IN		 AL,0x60		; 空读（为了清空数据接收缓存区中的垃圾数据）
   127 0000C2ED 75 F8                           		JNZ		waitkbdout		; AND的结果如果不是0，就跳到waitkbdout
   128 0000C2EF C3                              		RET
   129 0000C2F0                                 
   130 0000C2F0                                 memcpy:
   131 0000C2F0 67 66 8B 06                     		MOV		EAX,[ESI]
   132 0000C2F4 66 83 C6 04                     		ADD		ESI,4
   133 0000C2F8 67 66 89 07                     		MOV		[EDI],EAX
   134 0000C2FC 66 83 C7 04                     		ADD		EDI,4
   135 0000C300 66 83 E9 01                     		SUB		ECX,1
   136 0000C304 75 EA                           		JNZ		memcpy			; 减法运算的结果如果不是0，就跳到memcpy
   137 0000C306 C3                              		RET
   138 0000C307                                 ; memcpy 复制内存的程序
   139 0000C307                                 
   140 0000C307 00 00 00 00 00 00 00 00 00      		ALIGNB	16		; 一直添加DBO指令，知道实际合适位置，ALIGNB	16就是地址能被16整除时
   141 0000C310                                 						; 如果变迁GDT0的地址不是8的整数倍，向段寄存器复制的MOV指令会慢一些
   142 0000C310                                 GDT0:
   143 0000C310 00 00 00 00 00 00 00 00         		RESB	8							; NULL selector ，0号是NULL selector，不能在这里设定段
   144 0000C318 FFFF 0000 9200 00CF             		DW		0xffff,0x0000,0x9200,0x00cf	; 可读写的段 32bit
   145 0000C320 FFFF 0000 9A28 0047             		DW		0xffff,0x0000,0x9a28,0x0047	; 可执行的段 32bit bootpack用
   146 0000C328                                 ; 段1，2实在bootpack中初始化
   147 0000C328 0000                            		DW		0
   148 0000C32A                                 GDTR0:
   149 0000C32A 0017                            		DW		8*3-1
   150 0000C32C 0000C310                        		DD		GDT0
   151 0000C330                                 
   152 0000C330                                 		ALIGNB	16
   153 0000C330                                 bootpack:
